kturtle-script-v1.0
#Learning project "Dice" with KTurtle

#KTurtle is an educational programming environment for turtle graphics. KTurtle has a built-in programming language that is loosely based on the Logo programming language. It includes some basic elements, like variables, loops, ifs, includes some functions like sin or mod, and commands to control the turtle. It does not support arrays. The KTurtle language and IDE are limited to teaching programming using turtle graphics, and is not intended for other applications. 

#===================================
#Learning cascading of subroutines and functions.
#Learning interactivity and validating user's input
#===================================

# dice.turtle
# v. 1.0 

#Playing Yahtzee (Kniffel) with virtual dices

#Player starts program and rolls five dices. After it he has two attempts to reroll particular dices (from none to all five) to achieve a better combination of them.

#To reroll particular dices player gives a number, where each digit represents a dice to reroll. "253" means to reroll dices 2, 5 and 3.

#Player runs a program and attempts to achieve best possible result. When his turn is over, next player starts programm again.

#Dice values are stored in variables from $D1 to $D5

@(reset)
@(canvassize) 500@(,)100
@(spritehide)
@(penwidth) 2

@(learn) drawdices { # This subroutine draws a set of all five dices. It uses cascaded subroutine "drawdice" to draw every single dice
  @(clear)
  @(go) 50@(,)50
  drawdice $D1
  @(go) 150@(,)50
  drawdice $D2
  @(go) 250@(,)50
  drawdice $D3
  @(go) 350@(,)50
  drawdice $D4
  @(go) 450@(,)50
  drawdice $D5
}

@(learn) drawdice $Z { #This subroutine draws one single dice with given value $Z, uses cascaded subroutine to draw single point mark (small circle)
  $X = @(getx)
  $Y = @(gety)

#Drawing dice's border
  @(goy) $Y-26.4
  @(direction) 90
  @(repeat) 4 {
    @(forward) 20
    @(repeat) 5 {
      @(turnright) 18
      @(forward) 2
    }
    @(forward) 20
  }

#Drawing point marks (small circles) on dice
  @(if) $Z==1 {
    @(go) $X@(,)$Y
    drawcircle
    @(return)
  }
  @(if) $Z==2 {
    @(go) $X-15@(,)$Y+15
    drawcircle
    @(go) $X+15@(,)$Y-15
    drawcircle
    @(return)
  }
  @(if) $Z==3 {
    @(go) $X-15@(,)$Y+15
    drawcircle
    @(go) $X+15@(,)$Y-15
    drawcircle
    @(go) $X@(,)$Y
    drawcircle
    @(return)
  }
  @(if) $Z==4 {
    @(go) $X+15@(,)$Y+15
    drawcircle
    @(go) $X+15@(,)$Y-15
    drawcircle
    @(go) $X-15@(,)$Y+15
    drawcircle
    @(go) $X-15@(,)$Y-15
    drawcircle
    @(return)
  }
  @(if) $Z==5 {
    @(go) $X@(,)$Y
    drawcircle
    @(go) $X+15@(,)$Y+15
    drawcircle
    @(go) $X+15@(,)$Y-15
    drawcircle
    @(go) $X-15@(,)$Y+15
    drawcircle
    @(go) $X-15@(,)$Y-15
    drawcircle
    @(return)
  }
  @(if) $Z==6 {
    @(go) $X+15@(,)$Y+15
    drawcircle
    @(go) $X+15@(,)$Y-15
    drawcircle
    @(go) $X-15@(,)$Y+15
    drawcircle
    @(go) $X-15@(,)$Y-15
    drawcircle
    @(go) $X+15@(,)$Y
    drawcircle
    @(go) $X-15@(,)$Y
    drawcircle
  }
}

@(learn) drawcircle { #This subroutine draws small circle (point mark on a dice)
  @(penup)
  @(forward) 3
  @(pendown)
  @(turnright) 90
  @(repeat) 10 {
    @(turnright) 18
    @(forward) 1.885
    @(turnright) 18
  }
}

@(learn) integer $Z { #This function gives an integer back. KTurtle has integrated function "round" and we use it to calc integer. 
  $Zi = @(round) $Z
  @(if) $Z < $Zi {
    $Zi = $Zi-1
  }
  @(return) $Zi
}

@(learn) rerolldice $rrd { #This subroutine calculates new value for given dice
  @(if) $rrd==1 {
    $D1 = integer @(random) 1@(,)6.999999
    @(return)
  }
  @(if) $rrd==2 {
    $D2 = integer @(random) 1@(,)6.999999
    @(return)
  }
  @(if) $rrd==3 {
    $D3 = integer @(random) 1@(,)6.999999
    @(return)
  }
  @(if) $rrd==4 {
    $D4 = integer @(random) 1@(,)6.999999
    @(return)
  }
  @(if) $rrd==5 {
    $D5 = integer @(random) 1@(,)6.999999
    @(return)
  }
}

#-------------------------

# main

#Initial calculation of a first roll attempt for a set of dices. 
  $D1 = integer @(random) 1@(,)6.999999
  $D2 = integer @(random) 1@(,)6.999999
  $D3 = integer @(random) 1@(,)6.999999
  $D4 = integer @(random) 1@(,)6.999999
  $D5 = integer @(random) 1@(,)6.999999

  @(canvascolor) 230@(,)255@(,)230 #First attempt on green background

  drawdices 

# Player has 2 attempts to achieve better combination. Loop runs twice.
@(for) $AttemptsLeft=2 @(to) 1 @(step) -1 {

# Let player checks dices, wait 5 sec after 1st attempt, 2 sec after 2nd
  @(wait) $AttemptsLeft*3-1

#interaction. !!!There is a bug in KTurtle at the moment, instruction message appears at wrong place!!!
#  $ReRoll = ask "Wich dices you like to reroll? (give just numbers, f.e. 253 rerolls second, fifth and third dices. If you like to stay with actual set, just give 0 or close this popup window)"

# Workaround - asking for input without instruction message
  $ReRoll = @(ask) ""

  @(if) $ReRoll == "" @(or) $ReRoll <= 0 @(or) $ReRoll > 54321 { # We proof user's input. If input is empty or invalid - break the loop, turn is over
    @(break) 
  }

  $ReRoll = integer $ReRoll # We proof user's input. If not integer is given we cut it

#Now we reroll dices, extracting digits from given number.
  @(while) $ReRoll > 0 {
    rerolldice @(mod) $ReRoll@(,)10
    $ReRoll =  integer $ReRoll/10
  }

  @(canvascolor) 255@(,)255@(,)230 #yellow background for last attempt

  drawdices

}
@(canvascolor) 255@(,)230@(,)230 #End of turn on red backgound
@(go) 0@(,)-6
@(direction) 0
@(print) "Turn is over, write your result down"
